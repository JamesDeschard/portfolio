@use 'sass:map';

/**
 * Helper mixins
*/

// Placeholders
// Usage:
// @include placeholder;
@mixin placeholder {

  // sass-lint:disable no-vendor-prefixes
  ::-webkit-input-placeholder {
    @content;
  }

  :-moz-placeholder {
    @content;
  }

  ::-moz-placeholder {
    @content;
  }

  :-ms-input-placeholder {
    @content;
  }
}

// Mediaqueries
// Usage:
// @include mq(lg);
@mixin mq($mq-breakpoint, $mq-breakpoints: $breakpoints) {
  $mq-media-query: "screen and";

  @if $mq-breakpoint==landscape or $mq-breakpoint==portrait {
    $mq-media-query: "#{$mq-media-query} (orientation: #{$mq-breakpoint})";
  }

  @else if $mq-breakpoint==retina {
    $mq-media-query: "#{$mq-media-query} (-webkit-min-device-pixel-ratio: 2),"+"#{$mq-media-query} (min-resolution: 2dppx)";
  }

  @else {

    // If $mq-breakpoint is a key that exists in
    // $mq-breakpoints, get and use the value
    @if map.has-key($mq-breakpoints, $mq-breakpoint) {
      $mq-breakpoint: map.get($mq-breakpoints, $mq-breakpoint);
    }

    $mq-media-query: "#{$mq-media-query} (min-width: #{$mq-breakpoint})";
  }

  @media #{$mq-media-query} {
    @content;
  }
}

// Font styles
// Usage:
// @include fs(title);
@mixin fs($name) {
  @if map.has-key($font-styles, $name) {
    $name: map.get($font-styles, $name);
  }

  font-size: if(map.has-key($name, size), map.get($name, size), $base-font-size);
  line-height: if(map.has-key($name, lh), map.get($name, lh), $base-line-height);
  font-weight: if(map.has-key($name, weight), map.get($name, weight), 400);
  color: if(map.has-key($name, color), map.get($name, color), inherit);

  @if map.has-key($name, ratio) {
    $ratio: map.get($name, ratio);

    @include mq(if(map.has-key($name, bp), map.get($name, bp), md)) {
      font-size: map.get($name, size) * $ratio;
    }
  }
}

// Font styles
// Usage:
// @include fluid-type(16, 32, 480, 1500);

@mixin fluid-type($font-min, $font-max, $screen-min, $screen-max) {
  font-size: #{$font-min}px;

  @media only screen and (min-width: #{$screen-min}px) {
    font-size: calc(
      #{$font-min}px + #{($font-max - $font-min)} * (100vw - #{$screen-min}px) / (#{$screen-max} - #{$screen-min})
    );
  }

  @media only screen and (min-width: #{$screen-max}px) {
    font-size: #{$font-max}px;
  }
}

// Force element to have full viewport width
// Usage:
// @include fullWidth;
@mixin fullWidth {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
}

// Reset full width mixin
// Usage:
// @include resetFullWidth;
@mixin resetFullWidth {
  width: auto;
  left: 0;
  right: 0;
  margin-left: 0;
  margin-right: 0;
}

// Clamp text with ellipsis at n lines
// Usage:
// @include clamp(3);
@mixin clamp($nb) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  line-clamp: #{$nb};
  -webkit-line-clamp: #{$nb};
  -webkit-box-orient: vertical;
}

// This mixin can be used to set the object-fit:
// Usage:
// @include object-fit(contain) ;
// or object-fit and object-position:
// @include object-fit(cover, top);
@mixin object-fit($fit: cover, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;

  @if $position {
    -o-object-position: $position;
    object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  }

  @else {
    font-family: 'object-fit: #{$fit}';
  }
}

// Overlay using box shadow
// Usage:
// @include(500px, setColor(dark), 0.3);
@mixin overlay($size, $color: setColor(black), $opacity: 0.5) {
  box-shadow: 0 0 0 $size inset rgba($color, $opacity);
}

// Declare a font face
// Usage:
// @include(Roboto, ../fonts/roboto-v29-latin-regular, 900);
@mixin declare-font-face($font-family, $font-filename, $font-weight: 400, $font-style: normal, $font-stretch: normal) {
  @font-face {
    font-family: "#{$font-family}";
    font-style: $font-style;
    font-weight: $font-weight;
    font-stretch: $font-stretch;
    src:
      local("#{$font-family}"),
      url(#{$font-filename}.woff2) format("woff2"),
      url(#{$font-filename}.woff) format("woff");
    font-display: swap;
    unicode-range: U+0-10FFFF;
  }
}

// Screen reader
// Usage:
// @include sr-only;
@mixin sr-only($focusable: false) {
  position: absolute;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(1px, 1px, 1px, 1px) !important;

  /* 1 */
  clip-path: inset(50%) !important;

  /* 2 */
  white-space: nowrap !important;

  /* 3 */
  border: 0 !important;

  @if $focusable {
    &:focus,
    &:active {
      width: auto !important;
      height: auto !important;
      margin: auto !important;
      overflow: visible !important;
      clip: auto !important;
      clip-path: none !important;
      white-space: normal !important;
    }
  }
}

// Default container settings
// Usage:
// @include container;
@mixin container {
  width: $container-width;
  max-width: calc(100% - #{$mobile-external-gutter * 2});
  padding: 0;
  margin-right: auto;
  margin-left: auto;

  // overflow-x: hidden;
}


// App Mixins

// Circle

@mixin circle {
  @include mq(lg){
    height: rem($circle-circumference-large) !important;
    width: rem($circle-circumference-large) !important;   
  }

  @include mq(sm){
    height: rem($circle-circumference-medium);
    width: rem($circle-circumference-medium);
  }

  height: rem($circle-circumference-small);
  width: rem($circle-circumference-small);
  position: relative;
  display: block; 
  border-radius: 50%;
  background-color: setColor(gray, light);
}

// Justify Content Center-Row
@mixin justifyCenterRow{
  display: flex;
  justify-content: center;
  align-items: center;
}

// Justify Content Center-Col
@mixin justifyCenterCol{
  @include justifyCenterRow;
  flex-direction: column;
 
}

//titles

@mixin title{
  @include fluid-type(34, 64, 480, 1500);
  font-weight: 600;
  margin-top: rem($base-font-size);
}

@mixin overview {
  @include fluid-type(20, 28, 480, 1500);
  font-weight: 500;
  margin: rem($base-font-size) 0;
  color: setColor(gray, dark_font);
}

//tags

@mixin tag{
  padding: rem(6px) rem(12px);
  background-color: setColor(gray, light);
  backdrop-filter: blur(100px);
  border-radius: rem(8px);

  font-size: small;
}

//small circle

@mixin small_circle{
  @include justifyCenterCol;
  height: rem(112px);
  width: rem(112px);
  border-radius: 50%;
  background-color: setColor(gray, light);
  cursor: pointer;
}


